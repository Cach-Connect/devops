name: Deploy Infrastructure

on:
  push:
    branches:
      - main
    paths:
      - 'docker-compose*.yml'
      - 'nginx/**'
      - 'grafana/**'
      - 'loki/**'
      - 'promtail/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy infrastructure to'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging
          - sandbox
          - all
      service:
        description: 'Specific service to deploy (optional)'
        required: false
        type: choice
        options:
          - all
          - nginx
          - grafana
          - loki
          - promtail
          - postgres
          - minio

jobs:
  deploy-infrastructure:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'production' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate deployment parameters
        id: validate
        run: |
          ENVIRONMENT="${{ github.event.inputs.environment || 'production' }}"
          SERVICE="${{ github.event.inputs.service || 'all' }}"
          
          if [[ "${{ github.event_name }}" == "push" && "${{ github.ref_name }}" != "main" ]]; then
            echo "‚ùå Infrastructure can only be auto-deployed from main branch"
            exit 1
          fi
          
          echo "environment=$ENVIRONMENT" >> $GITHUB_OUTPUT
          echo "service=$SERVICE" >> $GITHUB_OUTPUT
          echo "‚úÖ Deploying $SERVICE to $ENVIRONMENT environment"

      - name: Deploy to server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          password: ${{ secrets.VPS_SSH_PASSWORD }}
          script: |
            set -e
            
            ENVIRONMENT="${{ steps.validate.outputs.environment }}"
            SERVICE="${{ steps.validate.outputs.service }}"
            
            # Create directory structure if it doesn't exist
            mkdir -p /opt/cach/{production,staging,sandbox}
            mkdir -p /opt/cach/shared/{nginx,grafana,loki,promtail,certbot}
            
            # Deploy to specific environment or all environments
            deploy_to_environment() {
              local env=$1
              echo "üöÄ Deploying infrastructure to $env environment..."
              
              cd /opt/cach/$env
              
              # Load environment-specific variables
              if [ -f ".env.$env" ]; then
                export $(cat .env.$env | xargs)
              fi
              
              case "$SERVICE" in
                "all")
                  echo "üì¶ Deploying all infrastructure services..."
                  docker-compose -f docker-compose.$env.yml up -d postgres minio
                  sleep 30  # Wait for databases to be ready
                  ;;
                "postgres")
                  echo "üêò Deploying PostgreSQL..."
                  docker-compose -f docker-compose.$env.yml up -d postgres
                  ;;
                "minio")
                  echo "üì¶ Deploying MinIO..."
                  docker-compose -f docker-compose.$env.yml up -d minio
                  ;;
                *)
                  echo "‚ö†Ô∏è  Service $SERVICE not handled for environment-specific deployment"
                  ;;
              esac
              
              echo "‚úÖ Infrastructure deployment completed for $env environment"
            }
            
            deploy_shared_services() {
              echo "üåê Deploying shared services..."
              
              cd /opt/cach/shared
              
              case "$SERVICE" in
                "all"|"nginx")
                  echo "üåê Deploying Nginx..."
                  # Update nginx configuration
                  sudo cp -r nginx/* /etc/nginx/
                  sudo nginx -t && sudo systemctl reload nginx
                  ;;
                "all"|"grafana")
                  echo "üìä Deploying Grafana..."
                  docker-compose -f docker-compose.shared.yml up -d grafana
                  ;;
                "all"|"loki")
                  echo "üìã Deploying Loki..."
                  docker-compose -f docker-compose.shared.yml up -d loki
                  ;;
                "all"|"promtail")
                  echo "üìù Deploying Promtail..."
                  docker-compose -f docker-compose.shared.yml up -d promtail
                  ;;
              esac
            }
            
            # Deploy based on environment selection
            if [[ "$ENVIRONMENT" == "all" ]]; then
              deploy_to_environment "production"
              deploy_to_environment "staging" 
              deploy_to_environment "sandbox"
              deploy_shared_services
            elif [[ "$SERVICE" == "nginx" || "$SERVICE" == "grafana" || "$SERVICE" == "loki" || "$SERVICE" == "promtail" ]]; then
              deploy_shared_services
            else
              deploy_to_environment "$ENVIRONMENT"
            fi
            
            # Clean up unused Docker resources
            docker system prune -f
            
            echo "üéâ Infrastructure deployment completed successfully!"

      - name: Setup SSL certificates (if nginx deployed)
        if: ${{ steps.validate.outputs.service == 'all' || steps.validate.outputs.service == 'nginx' }}
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          password: ${{ secrets.VPS_SSH_PASSWORD }}
          script: |
            echo "üîí Setting up SSL certificates..."
            
            # List of domains to get certificates for
            DOMAINS=(
              "api.cachconnect.co.ke"
              "admin.cachconnect.co.ke"
              "agents.cachconnect.co.ke"
              "distributors.cachconnect.co.ke"
              "business.cachconnect.co.ke"
              "lenders.cachconnect.co.ke"
              "api.staging.cachconnect.co.ke"
              "admin.staging.cachconnect.co.ke"
              "agents.staging.cachconnect.co.ke"
              "distributors.staging.cachconnect.co.ke"
              "business.staging.cachconnect.co.ke"
              "lenders.staging.cachconnect.co.ke"
              "api.sandbox.cachconnect.co.ke"
              "admin.sandbox.cachconnect.co.ke"
              "agents.sandbox.cachconnect.co.ke"
              "distributors.sandbox.cachconnect.co.ke"
              "business.sandbox.cachconnect.co.ke"
              "lenders.sandbox.cachconnect.co.ke"
              "monitoring.cachconnect.co.ke"
              "storage.cachconnect.co.ke"
              "storage.staging.cachconnect.co.ke"
              "storage.sandbox.cachconnect.co.ke"
            )
            
            cd /opt/cach/shared
            
            # Create directories for certbot
            mkdir -p certbot/{conf,www}
            
            # Get certificates for each domain
            for domain in "${DOMAINS[@]}"; do
              echo "Getting certificate for $domain..."
              
              # Check if certificate already exists and is valid
              if sudo certbot certificates | grep -q "$domain"; then
                echo "Certificate for $domain already exists"
                continue
              fi
              
              # Get new certificate
              sudo certbot certonly \
                --webroot \
                --webroot-path=/opt/cach/shared/certbot/www \
                --email ${{ secrets.ADMIN_EMAIL }} \
                --agree-tos \
                --no-eff-email \
                -d $domain \
                --non-interactive || echo "Failed to get certificate for $domain"
            done
            
            # Reload nginx to use new certificates
            sudo nginx -t && sudo systemctl reload nginx
            
            echo "‚úÖ SSL certificate setup completed"