name: Deploy Infrastructure Components

on:
  workflow_dispatch:
    inputs:
      component:
        description: 'Component to deploy'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - nginx
          - monitoring
          - postgres
          - minio
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging
          - sandbox

jobs:
  deploy-infrastructure:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'production' }}
    
    steps:
    - name: Checkout devops repository
      uses: actions/checkout@v4
      
    - name: Debug SSH Configuration
      run: |
        echo "üîç Debugging SSH configuration..."
        echo "VPS_HOST length: ${#VPS_HOST}"
        echo "VPS_USER length: ${#VPS_USER}"
        echo "VPS_PASSWORD length: ${#VPS_PASSWORD}"
        echo "VPS_HOST (masked): ${VPS_HOST:0:3}***${VPS_HOST: -3}"
        echo "VPS_USER (masked): ${VPS_USER:0:2}***"
        if [ -z "$VPS_HOST" ]; then
          echo "‚ùå VPS_HOST is empty or not set"
        else
          echo "‚úÖ VPS_HOST is set"
        fi
        if [ -z "$VPS_USER" ]; then
          echo "‚ùå VPS_USER is empty or not set"
        else
          echo "‚úÖ VPS_USER is set"
        fi
        if [ -z "$VPS_PASSWORD" ]; then
          echo "‚ùå VPS_PASSWORD is empty or not set"
        else
          echo "‚úÖ VPS_PASSWORD is set"
        fi
      env:
        VPS_HOST: ${{ secrets.VPS_HOST }}
        VPS_USER: ${{ secrets.VPS_USER }}
        VPS_PASSWORD: ${{ secrets.VPS_SSH_PASSWORD }}
      
    - name: Deploy infrastructure component
      uses: appleboy/ssh-action@v1.0.3
      env:
        SSH_HOST: ${{ secrets.VPS_HOST }}
        SSH_USER: ${{ secrets.VPS_USER }}
        SSH_PASSWORD: ${{ secrets.VPS_SSH_PASSWORD }}
      with:
        host: ${{ env.SSH_HOST }}
        username: ${{ env.SSH_USER }}
        password: ${{ env.SSH_PASSWORD }}
        script: |
          echo "üîÑ Updating devops repository..."
          if [ -d ~/devops ]; then
            echo "üìÅ Directory exists, updating..."
            cd ~/devops
            git pull origin main
          else
            echo "üìÅ Directory doesn't exist, cloning..."
            git clone https://github.com/Cach-Connect/devops.git ~/devops
            cd ~/devops
          fi
          
          echo "üîë Creating environment configuration..."
          cat > infrastructure.env << 'INFRA_EOF'
          # Infrastructure Configuration
          ENVIRONMENT=${{ github.event.inputs.environment }}
          
          # Database Configuration
          DATABASE_PASSWORD="${{ secrets.POSTGRES_PASSWORD }}"
          POSTGRES_PASSWORD="${{ secrets.POSTGRES_PASSWORD }}"
          
          # MinIO Configuration
          MINIO_ROOT_USER="${{ secrets.MINIO_ROOT_USER }}"
          MINIO_ROOT_PASSWORD="${{ secrets.MINIO_ROOT_PASSWORD }}"
          MINIO_SECRET_KEY="${{ secrets.MINIO_ROOT_PASSWORD }}"
          MINIO_ACCESS_KEY="${{ secrets.MINIO_ROOT_USER }}"
          MINIO_BUCKET_NAME="${{ secrets.MINIO_BUCKET_NAME }}"
          MINIO_USE_SSL="${{ secrets.MINIO_USE_SSL }}"
          
          # Grafana Configuration
          GRAFANA_PASSWORD="${{ secrets.GRAFANA_PASSWORD }}"
          GRAFANA_DOMAIN="${{ secrets.GRAFANA_DOMAIN }}"
          
          # Monitoring Database
          MONITORING_DB_PASSWORD="${{ secrets.POSTGRES_PASSWORD }}"
          
          # Domain Configuration
          API_DOMAIN="${{ vars.API_DOMAIN }}"
          AGENT_DOMAIN="${{ vars.AGENT_DOMAIN }}"
          DISTRIBUTOR_DOMAIN="${{ vars.DISTRIBUTOR_DOMAIN }}"
          BUSINESS_DOMAIN="${{ vars.BUSINESS_DOMAIN }}"
          ADMIN_DOMAIN="${{ vars.ADMIN_DOMAIN }}"
          LENDER_DOMAIN="${{ vars.LENDER_DOMAIN }}"
          STORAGE_DOMAIN="${{ vars.STORAGE_DOMAIN }}"
          MONITORING_DOMAIN="${{ vars.GRAFANA_DOMAIN }}"
          
          # SSL Configuration
          ACME_EMAIL="${{ vars.ACME_EMAIL }}"
          INFRA_EOF
          
          echo "üîß Making scripts executable..."
          chmod +x scripts/*.sh
          
          echo "üöÄ Deploying component: ${{ github.event.inputs.component }}"
          
          case "${{ github.event.inputs.component }}" in
            "nginx")
              echo "üåê Deploying Nginx..."
              ENV_FILE=infrastructure.env ./scripts/deploy.sh start-nginx
              ;;
            "monitoring")
              echo "üìä Deploying monitoring stack..."
              ENV_FILE=infrastructure.env ./scripts/deploy.sh start-monitoring
              ;;
            "postgres")
              echo "üêò Deploying PostgreSQL for ${{ github.event.inputs.environment }}..."
              ENV_FILE=infrastructure.env ./scripts/deploy.sh deploy-app -e ${{ github.event.inputs.environment }} -s postgres
              ;;
            "minio")
              echo "üìÅ Deploying MinIO for ${{ github.event.inputs.environment }}..."
              ENV_FILE=infrastructure.env ./scripts/deploy.sh deploy-app -e ${{ github.event.inputs.environment }} -s minio
              ;;
            "all")
              echo "üèóÔ∏è Deploying all infrastructure components..."
              echo "üìä Starting monitoring stack..."
              ENV_FILE=infrastructure.env ./scripts/deploy.sh start-monitoring
              echo "üåê Starting Nginx..."
              ENV_FILE=infrastructure.env ./scripts/deploy.sh start-nginx
              echo "üêò Starting PostgreSQL instances..."
              ENV_FILE=infrastructure.env ./scripts/deploy.sh deploy-app -e production -s postgres
              ENV_FILE=infrastructure.env ./scripts/deploy.sh deploy-app -e staging -s postgres
              ENV_FILE=infrastructure.env ./scripts/deploy.sh deploy-app -e sandbox -s postgres
              echo "üìÅ Starting MinIO instances..."
              ENV_FILE=infrastructure.env ./scripts/deploy.sh deploy-app -e production -s minio
              ENV_FILE=infrastructure.env ./scripts/deploy.sh deploy-app -e staging -s minio
              ENV_FILE=infrastructure.env ./scripts/deploy.sh deploy-app -e sandbox -s minio
              ;;
          esac
          
          echo "‚è≥ Waiting for services to stabilize..."
          sleep 30
          
          echo "üîç Checking deployment status..."
          ./scripts/deploy.sh show-status
          
          echo "‚úÖ Infrastructure deployment completed!"

    - name: Verify deployment
      uses: appleboy/ssh-action@v1.0.3
      env:
        SSH_HOST: ${{ secrets.VPS_HOST }}
        SSH_USER: ${{ secrets.VPS_USER }}
        SSH_PASSWORD: ${{ secrets.VPS_SSH_PASSWORD }}
      with:
        host: ${{ env.SSH_HOST }}
        username: ${{ env.SSH_USER }}
        password: ${{ env.SSH_PASSWORD }}
        script: |
          echo "üîç Final verification..."
          cd ~/devops
          
          echo "üìã Running containers:"
          docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}" | head -20
          
          if [[ "${{ github.event.inputs.component }}" == "nginx" || "${{ github.event.inputs.component }}" == "all" ]]; then
            echo ""
            echo "üåê Nginx status:"
            docker exec cach-nginx nginx -t && echo "‚úÖ Nginx configuration valid" || echo "‚ùå Nginx configuration invalid"
          fi
          
          if [[ "${{ github.event.inputs.component }}" == "monitoring" || "${{ github.event.inputs.component }}" == "all" ]]; then
            echo ""
            echo "üìä Monitoring services:"
            timeout 10 curl -f http://localhost:3000 > /dev/null && echo "‚úÖ Grafana responding" || echo "‚ö†Ô∏è Grafana not responding"
            timeout 10 curl -f http://localhost:3100/ready > /dev/null && echo "‚úÖ Loki responding" || echo "‚ö†Ô∏è Loki not responding"
          fi