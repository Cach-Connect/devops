name: Deploy Infrastructure Components

on:
  workflow_dispatch:
    inputs:
      component:
        description: 'Component to deploy'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - nginx
          - monitoring
          - postgres
          - minio
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'sandbox'
        type: choice
        options:
          - production
          - staging
          - sandbox

jobs:
  deploy-infrastructure:
    runs-on: ubuntu-latest
    
    steps:
      - name: Debug SSH Configuration
        run: |
          echo "üîç Debugging SSH configuration..."
          echo "Host provided: ${{ secrets.VPS_HOST != '' && 'Yes' || 'No' }}"
          echo "User provided: ${{ secrets.VPS_USER != '' && 'Yes' || 'No' }}"
          echo "Password provided: ${{ secrets.VPS_SSH_PASSWORD != '' && 'Yes' || 'No' }}"
      
      - name: Deploy via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          password: ${{ secrets.VPS_SSH_PASSWORD }}
          script: |
            echo "üîÑ Updating devops repository..."
            cd ~/devops || (git clone https://github.com/Cach-Connect/devops.git ~/devops && cd ~/devops)
            git pull origin main
            
            echo "üîë Creating environment configuration..."
            cat > infrastructure.env << 'INFRA_EOF'
            # Infrastructure Configuration
            ENVIRONMENT=${{ github.event.inputs.environment }}
            
            # Database Configuration
            DATABASE_PASSWORD="${{ secrets.POSTGRES_PASSWORD }}"
            POSTGRES_PASSWORD="${{ secrets.POSTGRES_PASSWORD }}"
            
            # MinIO Configuration
            MINIO_ROOT_USER="${{ secrets.MINIO_ROOT_USER }}"
            MINIO_ROOT_PASSWORD="${{ secrets.MINIO_ROOT_PASSWORD }}"
            MINIO_SECRET_KEY="${{ secrets.MINIO_ROOT_PASSWORD }}"
            MINIO_ACCESS_KEY="${{ secrets.MINIO_ROOT_USER }}"
            MINIO_BUCKET_NAME="${{ vars.MINIO_BUCKET_NAME }}"
            MINIO_USE_SSL="${{ vars.MINIO_USE_SSL }}"
            
            # Grafana Configuration
            GRAFANA_PASSWORD="${{ secrets.GRAFANA_PASSWORD }}"
            GRAFANA_DOMAIN="${{ vars.GRAFANA_DOMAIN }}"
            
            # Monitoring Database
            MONITORING_DB_PASSWORD="${{ secrets.POSTGRES_PASSWORD }}"
            
            # Domain Configuration
            API_DOMAIN="${{ vars.API_DOMAIN }}"
            AGENT_DOMAIN="${{ vars.AGENT_DOMAIN }}"
            DISTRIBUTOR_DOMAIN="${{ vars.DISTRIBUTOR_DOMAIN }}"
            BUSINESS_DOMAIN="${{ vars.BUSINESS_DOMAIN }}"
            ADMIN_DOMAIN="${{ vars.ADMIN_DOMAIN }}"
            LENDER_DOMAIN="${{ vars.LENDER_DOMAIN }}"
            STORAGE_DOMAIN="${{ vars.STORAGE_DOMAIN }}"
            MONITORING_DOMAIN="${{ vars.GRAFANA_DOMAIN }}"
            
            # SSL Configuration
            ACME_EMAIL="${{ vars.ACME_EMAIL }}"
            INFRA_EOF
            
            echo "üîß Making scripts executable..."
            chmod +x scripts/*.sh
            
            echo "üöÄ Deploying component: ${{ github.event.inputs.component }}"
            
            case "${{ github.event.inputs.component }}" in
              "nginx")
                echo "üåê Deploying Nginx..."
                ENV_FILE=infrastructure.env ./scripts/deploy.sh start-nginx
                ;;
              "monitoring")
                echo "üìä Deploying monitoring stack..."
                ENV_FILE=infrastructure.env ./scripts/deploy.sh start-monitoring
                ;;
              "postgres")
                echo "üêò Deploying PostgreSQL for ${{ github.event.inputs.environment }}..."
                ENV_FILE=infrastructure.env ./scripts/deploy.sh deploy-app -e ${{ github.event.inputs.environment }} -s postgres
                ;;
              "minio")
                echo "üìÅ Deploying MinIO for ${{ github.event.inputs.environment }}..."
                ENV_FILE=infrastructure.env ./scripts/deploy.sh deploy-app -e ${{ github.event.inputs.environment }} -s minio
                ;;
              "all")
                echo "üèóÔ∏è Deploying all infrastructure components..."
                echo "üìä Starting monitoring stack..."
                ENV_FILE=infrastructure.env ./scripts/deploy.sh start-monitoring
                echo "üåê Starting Nginx..."
                ENV_FILE=infrastructure.env ./scripts/deploy.sh start-nginx
                echo "üêò Starting PostgreSQL instances..."
                ENV_FILE=infrastructure.env ./scripts/deploy.sh deploy-app -e production -s postgres
                ENV_FILE=infrastructure.env ./scripts/deploy.sh deploy-app -e staging -s postgres
                ENV_FILE=infrastructure.env ./scripts/deploy.sh deploy-app -e sandbox -s postgres
                echo "üìÅ Starting MinIO instances..."
                ENV_FILE=infrastructure.env ./scripts/deploy.sh deploy-app -e production -s minio
                ENV_FILE=infrastructure.env ./scripts/deploy.sh deploy-app -e staging -s minio
                ENV_FILE=infrastructure.env ./scripts/deploy.sh deploy-app -e sandbox -s minio
                ;;
            esac
            
            echo "‚è≥ Waiting for services to stabilize..."
            sleep 30
            
            echo "üîç Checking deployment status..."
            ./scripts/deploy.sh show-status
            
            echo "‚úÖ Infrastructure deployment completed!"

      - name: Verify deployment
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          password: ${{ secrets.VPS_SSH_PASSWORD }}
          script: |
            echo "üîç Final verification..."
            
            echo "üìã Running containers:"
            docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}" | head -20
            
            echo ""
            echo "üåê Testing Nginx configuration..."
            docker exec cach-nginx nginx -t || echo "‚ö†Ô∏è Nginx configuration test failed"
            
            if [[ "${{ github.event.inputs.component }}" == "nginx" || "${{ github.event.inputs.component }}" == "all" ]]; then
              echo ""
              echo "üåê Nginx status:"
              docker exec cach-nginx nginx -t && echo "‚úÖ Nginx configuration valid" || echo "‚ùå Nginx configuration invalid"
            fi
            
            if [[ "${{ github.event.inputs.component }}" == "monitoring" || "${{ github.event.inputs.component }}" == "all" ]]; then
              echo ""
              echo "üìä Monitoring services:"
              timeout 10 curl -f http://localhost:3000 > /dev/null && echo "‚úÖ Grafana responding" || echo "‚ö†Ô∏è Grafana not responding"
              timeout 10 curl -f http://localhost:3100/ready > /dev/null && echo "‚úÖ Loki responding" || echo "‚ö†Ô∏è Loki not responding"
            fi