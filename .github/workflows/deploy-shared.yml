name: Deploy Shared Infrastructure

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging
          - sandbox
      action:
        description: 'Action to perform'
        required: true
        default: 'deploy'
        type: choice
        options:
          - deploy
          - restart
          - stop
          - ssl-setup
          - ssl-renew

env:
  REGISTRY: docker.io

jobs:
  validate-deployment:
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.set-env.outputs.environment }}
      action: ${{ steps.set-env.outputs.action }}
    steps:
      - name: Determine environment and validate branch
        id: set-env
        run: |
          ENVIRONMENT="${{ github.event.inputs.environment }}"
          ACTION="${{ github.event.inputs.action }}"
          
          # Validate branch permissions for manual dispatch
          if [[ "$ENVIRONMENT" == "production" && "${{ github.ref_name }}" != "main" ]]; then
            echo "❌ Cannot deploy to production from branch '${{ github.ref_name }}'. Only 'main' branch is allowed."
            exit 1
          elif [[ "$ENVIRONMENT" == "staging" && "${{ github.ref_name }}" != "staging" ]]; then
            echo "❌ Cannot deploy to staging from branch '${{ github.ref_name }}'. Only 'staging' branch is allowed."
          fi
          
          echo "environment=$ENVIRONMENT" >> $GITHUB_OUTPUT
          echo "action=$ACTION" >> $GITHUB_OUTPUT
          echo "✅ Deploying shared infrastructure to $ENVIRONMENT environment with action: $ACTION"

  deploy-shared-infrastructure:
    runs-on: ubuntu-latest
    needs: validate-deployment
    environment: ${{ needs.validate-deployment.outputs.environment }}
    
    steps:
      - name: SSH into server and deploy shared infrastructure
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          password: ${{ secrets.VPS_SSH_PASSWORD }}
          script: |
            cd ~

            # Get latest devops configuration
            echo "📥 Downloading latest devops configuration..."
            if [ -d "devops" ]; then
              echo "Devops directory exists, updating..."
              cd devops
              git pull origin main
            else
              echo "Devops directory doesn't exist, cloning..."
              git clone https://github.com/Cach-Connect/devops.git devops
              cd devops
            fi

            # Set environment variables
            ENVIRONMENT="${{ needs.validate-deployment.outputs.environment }}"
            ACTION="${{ needs.validate-deployment.outputs.action }}"
            
            echo "🔧 Environment: $ENVIRONMENT"
            echo "⚡ Action: $ACTION"
            
            # Create shared deployment directory
            cd /opt/cach || (mkdir -p /opt/cach && cd /opt/cach)
            
            if [ ! -d "shared" ]; then
              mkdir -p shared
            fi
            cd shared
            
            # Copy all shared infrastructure files
            echo "📋 Copying shared infrastructure configuration..."
            cp ~/devops/docker-compose/docker-compose.shared.yml .
            
            # Copy monitoring configuration with proper structure
            echo "📋 Setting up monitoring configuration..."
            rm -rf monitoring && mkdir -p monitoring
            cp -r ~/devops/monitoring/* ./monitoring/
            
            # Copy nginx configuration
            echo "📋 Setting up nginx configuration..."
            rm -rf nginx && mkdir -p nginx
            cp -r ~/devops/nginx/* ./nginx/
            
            # Copy scripts
            echo "📋 Setting up scripts..."
            rm -rf scripts && mkdir -p scripts
            cp -r ~/devops/scripts/* ./scripts/
            
            # Create required directories
            mkdir -p ssl/certs ssl/private ssl/www
            mkdir -p logs
            
            # Set permissions for scripts
            chmod +x scripts/*.sh scripts/certbot/*.sh
            
            # Verify critical files exist
            echo "🔍 Verifying configuration files..."
            required_files=(
              "monitoring/prometheus/prometheus.yml"
              "monitoring/loki/loki.yml"
              "monitoring/promtail/promtail.yml"
              "monitoring/alertmanager/alertmanager.yml"
              "monitoring/grafana/provisioning/datasources/datasources.yml"
              "nginx/nginx.conf"
              "nginx/conf.d/cach.conf"
              "docker-compose.shared.yml"
            )
            
            for file in "${required_files[@]}"; do
              if [ -f "$file" ]; then
                echo "✅ $file exists"
              else
                echo "❌ $file is missing"
                echo "📁 Contents of $(dirname $file):"
                ls -la "$(dirname $file)" || echo "Directory doesn't exist"
                
                # Debug: show what was actually copied
                echo "🔍 Debug - showing actual file structure:"
                echo "Current directory: $(pwd)"
                echo "Top level files:"
                ls -la
                echo "Monitoring structure:"
                find . -name "*.yml" -o -name "*.yaml" | grep monitoring || echo "No monitoring yaml files found"
                
                exit 1
              fi
            done
            
            # Load environment variables from .env file
            echo "📋 Setting up environment configuration..."
            if [ -f ".env.monitoring" ]; then
              rm -f .env.monitoring
            fi
            cp ~/devops/env.monitoring.example .env.monitoring 2>/dev/null || echo "⚠️  No monitoring env file found, using defaults"
            
            # Perform the requested action
            case "$ACTION" in
              "deploy")
                echo "🚀 Deploying shared infrastructure..."
                
                # Pull latest images
                echo "🐳 Pulling latest Docker images..."
                docker-compose -f docker-compose.shared.yml pull
                
                # Start all shared services
                echo "🔄 Starting shared services..."
                docker-compose -f docker-compose.shared.yml up -d
                
                # Wait for services to be ready
                echo "⏳ Waiting for services to be ready..."
                sleep 30
                
                # Check service health
                echo "🔍 Checking service health..."
                services=("prometheus" "grafana" "loki" "alertmanager" "nginx")
                all_healthy=true
                
                for service in "${services[@]}"; do
                  if docker ps --filter "name=cach_$service" --filter "status=running" | grep -q "cach_$service"; then
                    echo "✅ $service is running"
                  else
                    echo "❌ $service is not running"
                    all_healthy=false
                  fi
                done
                
                if [ "$all_healthy" = false ]; then
                  echo "❌ Some services failed to start. Checking logs..."
                  docker-compose -f docker-compose.shared.yml logs --tail=50
                  exit 1
                fi
                
                echo "🎉 Shared infrastructure deployment completed successfully!"
                echo "📊 Access points:"
                echo "   - Grafana: https://grafana.cachconnect.co.ke"
                echo "   - Prometheus: http://${{ secrets.VPS_HOST }}:9090"
                echo "   - Alertmanager: http://${{ secrets.VPS_HOST }}:9093"
                ;;
                
              "restart")
                echo "🔄 Restarting shared services..."
                docker-compose -f docker-compose.shared.yml restart
                echo "✅ Shared services restarted successfully"
                ;;
                
              "stop")
                echo "🛑 Stopping shared services..."
                docker-compose -f docker-compose.shared.yml down
                echo "✅ Shared services stopped successfully"
                ;;
                
              "ssl-setup")
                echo "🔒 Setting up SSL certificates..."
                
                # Ensure nginx is running for ACME challenge
                docker-compose -f docker-compose.shared.yml up -d nginx
                sleep 10
                
                # Run SSL setup script
                ./scripts/setup-ssl.sh false
                
                echo "✅ SSL setup completed"
                ;;
                
              "ssl-renew")
                echo "🔄 Renewing SSL certificates..."
                
                # Run SSL renewal script
                ./scripts/certbot/renew-ssl.sh
                
                echo "✅ SSL renewal completed"
                ;;
                
              *)
                echo "❌ Unknown action: $ACTION"
                exit 1
                ;;
            esac
            
            # Clean up unused images and containers
            echo "🧹 Cleaning up unused Docker resources..."
            docker system prune -f
            
            # Show final status
            echo "📋 Final service status:"
            docker-compose -f docker-compose.shared.yml ps
            
            echo "🎉 Shared infrastructure operation completed successfully!"

  post-deployment-checks:
    runs-on: ubuntu-latest
    needs: [validate-deployment, deploy-shared-infrastructure]
    if: needs.validate-deployment.outputs.action == 'deploy'
    environment: ${{ needs.validate-deployment.outputs.environment }}
    
    steps:
      - name: Verify deployment health
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          password: ${{ secrets.VPS_SSH_PASSWORD }}
          script: |
            cd /opt/cach/shared
            
            echo "🔍 Running post-deployment health checks..."
            
            # Check if all containers are running
            if ! docker-compose -f docker-compose.shared.yml ps | grep -q "Up"; then
              echo "❌ Some containers are not running"
              docker-compose -f docker-compose.shared.yml ps
              exit 1
            fi
            
            # Test Prometheus endpoint
            echo "🔍 Testing Prometheus..."
            timeout=30
            while [ $timeout -gt 0 ]; do
              if curl -s http://localhost:9090/-/healthy > /dev/null; then
                echo "✅ Prometheus is healthy"
                break
              fi
              echo "⏳ Waiting for Prometheus... ($timeout seconds remaining)"
              sleep 5
              timeout=$((timeout-5))
            done
            
            if [ $timeout -le 0 ]; then
              echo "❌ Prometheus health check failed"
              exit 1
            fi
            
            # Test Grafana endpoint
            echo "🔍 Testing Grafana..."
            timeout=30
            while [ $timeout -gt 0 ]; do
              if curl -s http://localhost:3000/api/health > /dev/null; then
                echo "✅ Grafana is healthy"
                break
              fi
              echo "⏳ Waiting for Grafana... ($timeout seconds remaining)"
              sleep 5
              timeout=$((timeout-5))
            done
            
            if [ $timeout -le 0 ]; then
              echo "❌ Grafana health check failed"
              exit 1
            fi
            
            # Test Loki endpoint
            echo "🔍 Testing Loki..."
            if curl -s http://localhost:3100/ready > /dev/null; then
              echo "✅ Loki is healthy"
            else
              echo "❌ Loki health check failed"
              exit 1
            fi
            
            # Test Alertmanager endpoint
            echo "🔍 Testing Alertmanager..."
            if curl -s http://localhost:9093/-/healthy > /dev/null; then
              echo "✅ Alertmanager is healthy"
            else
              echo "❌ Alertmanager health check failed"
              exit 1
            fi
            
            echo "🎉 All health checks passed successfully!"
            echo "📊 Monitoring stack is fully operational"
