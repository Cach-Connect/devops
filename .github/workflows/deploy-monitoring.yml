name: Deploy Monitoring Stack

on:
  push:
    branches: [ main ]
    paths:
      - 'nginx/**'
      - 'scripts/**'
      - 'env/**'
      - '.github/workflows/deploy-monitoring.yml'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging
          - sandbox
      force_deploy:
        description: 'Force deployment even without changes'
        required: false
        default: false
        type: boolean

jobs:
  deploy-monitoring:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout devops repository
      uses: actions/checkout@v4
      
    - name: Deploy monitoring stack to VPS
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USER }}
        password: ${{ secrets.VPS_SSH_PASSWORD }}
        script: |
          echo "üîÑ Updating devops repository..."
          cd ~/devops || (git clone https://github.com/Cach-Connect/devops.git ~/devops && cd ~/devops)
          git pull origin main
          
          echo "üîë Creating monitoring environment configuration..."
          cat > monitoring.env << 'MONITORING_EOF'
          # Monitoring Stack Configuration
          ENVIRONMENT=production
          
          # Grafana Configuration
          GRAFANA_PASSWORD="${{ secrets.GRAFANA_PASSWORD }}"
          GRAFANA_DOMAIN="${{ vars.GRAFANA_DOMAIN }}"
          
          # MinIO for Monitoring Data
          MONITORING_MINIO_ROOT_USER="${{ secrets.MINIO_ROOT_USER }}"
          MONITORING_MINIO_ROOT_PASSWORD="${{ secrets.MINIO_ROOT_PASSWORD }}"
          
          # PostgreSQL for Monitoring Data
          MONITORING_DB_PASSWORD="${{ secrets.POSTGRES_PASSWORD }}"
          
          # Loki Configuration
          LOKI_STORAGE_BUCKET="loki-storage"
          
          # SSL Configuration
          ACME_EMAIL="${{ vars.ACME_EMAIL }}"
          
          # Domain Configuration
          API_DOMAIN="${{ vars.API_DOMAIN }}"
          AGENT_DOMAIN="${{ vars.AGENT_DOMAIN }}"
          DISTRIBUTOR_DOMAIN="${{ vars.DISTRIBUTOR_DOMAIN }}"
          BUSINESS_DOMAIN="${{ vars.BUSINESS_DOMAIN }}"
          ADMIN_DOMAIN="${{ vars.ADMIN_DOMAIN }}"
          LENDER_DOMAIN="${{ vars.LENDER_DOMAIN }}"
          STORAGE_DOMAIN="${{ vars.STORAGE_DOMAIN }}"
          MONITORING_DOMAIN="${{ vars.GRAFANA_DOMAIN }}"
          MONITORING_EOF
          
          echo "üîß Making scripts executable..."
          chmod +x scripts/*.sh
          
          echo "üõë Stopping existing monitoring services..."
          ./scripts/deploy.sh stop-monitoring || echo "No monitoring services to stop"
          
          echo "üõë Stopping existing nginx..."
          ./scripts/deploy.sh stop-nginx || echo "No nginx to stop"
          
          echo "üöÄ Starting monitoring stack..."
          ENV_FILE=monitoring.env ./scripts/deploy.sh start-monitoring
          
          echo "üåê Starting nginx reverse proxy..."
          ENV_FILE=monitoring.env ./scripts/deploy.sh start-nginx
          
          echo "‚è≥ Waiting for services to be healthy..."
          sleep 30
          
          echo "üîç Checking service status..."
          ./scripts/deploy.sh show-status
          
          echo "‚úÖ Monitoring stack deployment completed!"
          echo ""
          echo "üìä Access your services:"
          echo "üîç Grafana: https://${{ vars.GRAFANA_DOMAIN }}"
          echo "üì¶ MinIO Console: https://${{ vars.STORAGE_DOMAIN }}"
          echo "üåê API: https://${{ vars.API_DOMAIN }}"
          echo "üë• Agent App: https://${{ vars.AGENT_DOMAIN }}"
          echo "üè¢ Business App: https://${{ vars.BUSINESS_DOMAIN }}"
          echo "üîó Distributor App: https://${{ vars.DISTRIBUTOR_DOMAIN }}"
          echo "‚öôÔ∏è Admin App: https://${{ vars.ADMIN_DOMAIN }}"
          echo "üè¶ Lender App: https://${{ vars.LENDER_DOMAIN }}"

    - name: Verify deployment
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USER }}
        password: ${{ secrets.VPS_SSH_PASSWORD }}
        script: |
          echo "üîç Final health check..."
          
          echo "üìã Docker containers:"
          docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
          
          echo ""
          echo "üåê Testing Nginx configuration..."
          docker exec cach-nginx nginx -t || echo "‚ö†Ô∏è Nginx configuration test failed"
          
          echo ""
          echo "üìä Testing Grafana connectivity..."
          timeout 10 curl -f http://localhost:3000 > /dev/null && echo "‚úÖ Grafana is responding" || echo "‚ö†Ô∏è Grafana not responding"
          
          echo ""
          echo "üìÅ Testing MinIO connectivity..."
          timeout 10 curl -f http://localhost:9006/minio/health/live > /dev/null && echo "‚úÖ Monitoring MinIO is responding" || echo "‚ö†Ô∏è Monitoring MinIO not responding"