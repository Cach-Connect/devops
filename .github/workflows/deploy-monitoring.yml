name: Deploy Monitoring Stack

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging
          - sandbox
      force_deploy:
        description: 'Force deployment even without changes'
        required: false
        default: false
        type: boolean

jobs:
  deploy-monitoring:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'production' }}
    
    steps:
    - name: Checkout devops repository
      uses: actions/checkout@v4
      
    - name: Debug SSH Configuration
      run: |
        echo "üîç Debugging SSH configuration..."
        echo "VPS_HOST length: ${#VPS_HOST}"
        echo "VPS_USER length: ${#VPS_USER}"
        echo "VPS_PASSWORD length: ${#VPS_PASSWORD}"
        echo "VPS_HOST (masked): ${VPS_HOST:0:3}***${VPS_HOST: -3}"
        echo "VPS_USER (masked): ${VPS_USER:0:2}***"
        if [ -z "$VPS_HOST" ]; then
          echo "‚ùå VPS_HOST is empty or not set"
        else
          echo "‚úÖ VPS_HOST is set"
        fi
        if [ -z "$VPS_USER" ]; then
          echo "‚ùå VPS_USER is empty or not set"
        else
          echo "‚úÖ VPS_USER is set"
        fi
        if [ -z "$VPS_PASSWORD" ]; then
          echo "‚ùå VPS_PASSWORD is empty or not set"
        else
          echo "‚úÖ VPS_PASSWORD is set"
        fi
      env:
        VPS_HOST: ${{ secrets.VPS_HOST }}
        VPS_USER: ${{ secrets.VPS_USER }}
        VPS_PASSWORD: ${{ secrets.VPS_SSH_PASSWORD }}
      
    - name: Deploy monitoring stack to VPS
      uses: appleboy/ssh-action@v1.0.3
      env:
        SSH_HOST: ${{ secrets.VPS_HOST }}
        SSH_USER: ${{ secrets.VPS_USER }}
        SSH_PASSWORD: ${{ secrets.VPS_SSH_PASSWORD }}
      with:
        host: ${{ env.SSH_HOST }}
        username: ${{ env.SSH_USER }}
        password: ${{ env.SSH_PASSWORD }}
        script: |
          echo "üîÑ Updating devops repository..."
          if [ -d ~/devops ]; then
            echo "üìÅ Directory exists, updating..."
            cd ~/devops
            git pull origin main
          else
            echo "üìÅ Directory doesn't exist, cloning..."
            git clone https://github.com/Cach-Connect/devops.git ~/devops
            cd ~/devops
          fi
          
          echo "üîë Creating monitoring environment configuration..."
          cat > monitoring.env << 'MONITORING_EOF'
          # Monitoring Stack Configuration
          ENVIRONMENT=production
          
          # Grafana Configuration
          GRAFANA_PASSWORD="${{ secrets.GRAFANA_PASSWORD }}"
          GRAFANA_DOMAIN="${{ secrets.GRAFANA_DOMAIN }}"
          
          # MinIO for Monitoring Data
          MONITORING_MINIO_ROOT_USER="${{ secrets.MINIO_ROOT_USER }}"
          MONITORING_MINIO_ROOT_PASSWORD="${{ secrets.MINIO_ROOT_PASSWORD }}"
          
          # PostgreSQL for Monitoring Data
          MONITORING_DB_PASSWORD="${{ secrets.POSTGRES_PASSWORD }}"
          
          # Loki Configuration
          LOKI_STORAGE_BUCKET="loki-storage"
          
          # SSL Configuration
          ACME_EMAIL="${{ vars.ACME_EMAIL }}"
          
          # Domain Configuration
          API_DOMAIN="${{ vars.API_DOMAIN }}"
          AGENT_DOMAIN="${{ vars.AGENT_DOMAIN }}"
          DISTRIBUTOR_DOMAIN="${{ vars.DISTRIBUTOR_DOMAIN }}"
          BUSINESS_DOMAIN="${{ vars.BUSINESS_DOMAIN }}"
          ADMIN_DOMAIN="${{ vars.ADMIN_DOMAIN }}"
          LENDER_DOMAIN="${{ vars.LENDER_DOMAIN }}"
          STORAGE_DOMAIN="${{ vars.STORAGE_DOMAIN }}"
          MONITORING_DOMAIN="${{ vars.GRAFANA_DOMAIN }}"
          MONITORING_EOF
          
          echo "üîß Making scripts executable..."
          chmod +x scripts/*.sh
          
          echo "üîó Creating main environment file link..."
          ln -sf monitoring.env .env
          
          echo "üõë Stopping existing monitoring services..."
          ./scripts/deploy.sh stop-monitoring || echo "No monitoring services to stop"
          
          echo "üõë Stopping existing nginx..."
          ./scripts/deploy.sh stop-nginx || echo "No nginx to stop"
          
          echo "üöÄ Starting monitoring stack..."
          ENV_FILE=monitoring.env ./scripts/deploy.sh start-monitoring
          
          echo "üåê Starting nginx reverse proxy..."
          ENV_FILE=monitoring.env ./scripts/deploy.sh start-nginx
          echo "üîç Checking nginx deployment result..."
          docker ps | grep nginx || echo "‚ö†Ô∏è No nginx containers found after deployment"
          
          echo "‚è≥ Waiting for services to be healthy..."
          sleep 30
          
          echo "üîç Checking service status..."
          ./scripts/deploy.sh status
          
          echo "‚úÖ Monitoring stack deployment completed!"
          echo ""
          echo "üìä Access your services:"
          echo "üîç Grafana: https://${{ vars.GRAFANA_DOMAIN }}"
          echo "üì¶ MinIO Console: https://${{ vars.STORAGE_DOMAIN }}"
          echo "üåê API: https://${{ vars.API_DOMAIN }}"
          echo "üë• Agent App: https://${{ vars.AGENT_DOMAIN }}"
          echo "üè¢ Business App: https://${{ vars.BUSINESS_DOMAIN }}"
          echo "üîó Distributor App: https://${{ vars.DISTRIBUTOR_DOMAIN }}"
          echo "‚öôÔ∏è Admin App: https://${{ vars.ADMIN_DOMAIN }}"
          echo "üè¶ Lender App: https://${{ vars.LENDER_DOMAIN }}"

    - name: Verify deployment
      uses: appleboy/ssh-action@v1.0.3
      env:
        SSH_HOST: ${{ secrets.VPS_HOST }}
        SSH_USER: ${{ secrets.VPS_USER }}
        SSH_PASSWORD: ${{ secrets.VPS_SSH_PASSWORD }}
      with:
        host: ${{ env.SSH_HOST }}
        username: ${{ env.SSH_USER }}
        password: ${{ env.SSH_PASSWORD }}
        script: |
          echo "üîç Final health check..."
          cd ~/devops
          
          echo "üìã Docker containers:"
          docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
          
          echo ""
          echo "üåê Testing Nginx configuration..."
          if docker ps | grep -q "cach-nginx"; then
            docker exec cach-nginx nginx -t && echo "‚úÖ Nginx configuration valid" || echo "‚ùå Nginx configuration invalid"
          else
            echo "‚ùå Nginx container (cach-nginx) is not running"
            echo "üîç Checking if container exists but stopped:"
            docker ps -a | grep cach-nginx || echo "   No cach-nginx container found"
            echo "üîç Checking nginx logs:"
            docker logs cach-nginx 2>/dev/null | tail -10 || echo "   No logs available for cach-nginx"
          fi
          
          echo ""
          echo "üìä Testing Grafana connectivity..."
          timeout 10 curl -f http://localhost:3000 > /dev/null && echo "‚úÖ Grafana is responding" || echo "‚ö†Ô∏è Grafana not responding"
          
          echo ""
          echo "üìÅ Testing MinIO connectivity..."
          timeout 10 curl -f http://localhost:9006/minio/health/live > /dev/null && echo "‚úÖ Monitoring MinIO is responding" || echo "‚ö†Ô∏è Monitoring MinIO not responding"