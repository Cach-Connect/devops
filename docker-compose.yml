version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: cach-postgres-${ENVIRONMENT:-Sandbox}
    restart: unless-stopped
    environment:
      POSTGRES_DB: cach_db_${ENVIRONMENT:-Sandbox}
      POSTGRES_USER: cach_user
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
    ports:
      - "${DB_PORT:-5432}:5432"
    volumes:
      - postgres_data_${ENVIRONMENT:-Sandbox}:/var/lib/postgresql/data
    networks:
      - cach-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U cach_user -d cach_db_${ENVIRONMENT:-Sandbox}"]
      interval: 10s
      timeout: 5s
      retries: 5
    logging:
      driver: local
      # options:
      #   loki-url: "http://localhost:${LOKI_PORT:-3100}/loki/api/v1/push"
      #   loki-batch-size: "400"

  # MinIO Object Storage
  minio:
    image: minio/minio:latest
    container_name: cach-minio-${ENVIRONMENT:-Sandbox}
    restart: unless-stopped
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    ports:
      - "${MINIO_PORT:-9000}:9000"
      - "${MINIO_CONSOLE_PORT:-9001}:9001"
    volumes:
      - minio_data_${ENVIRONMENT:-Sandbox}:/data
    networks:
      - cach-network
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    logging:
      driver: local
      # options:
      #   loki-url: "http://localhost:${LOKI_PORT:-3100}/loki/api/v1/push"
      #   loki-batch-size: "400"

  # Loki for log aggregation
  loki:
    image: grafana/loki:2.9.0
    container_name: cach-loki-${ENVIRONMENT:-Sandbox}
    restart: unless-stopped
    ports:
      - "${LOKI_PORT:-3100}:3100"
    volumes:
      - loki_data_${ENVIRONMENT:-Sandbox}:/loki
      - ./loki-config.yml:/etc/loki/local-config.yaml
    networks:
      - cach-network
    command: -config.file=/etc/loki/local-config.yaml

  # Grafana for monitoring
  grafana:
    image: grafana/grafana:10.1.0
    container_name: cach-grafana-${ENVIRONMENT:-Sandbox}
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_DOMAIN=${GRAFANA_DOMAIN:-localhost}
      - GF_SERVER_ROOT_URL=http://${GRAFANA_DOMAIN:-localhost}:${GRAFANA_PORT:-3000}
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    volumes:
      - grafana_data_${ENVIRONMENT:-Sandbox}:/var/lib/grafana
      - ./grafana-datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml
      - ./grafana-dashboards.yml:/etc/grafana/provisioning/dashboards/dashboards.yml
    networks:
      - cach-network
    depends_on:
      - loki

  # Main API Service
  api:
    image: ${IMAGE_NAME:-abc254/api-cach-api}:${IMAGE_TAG:-latest}
    container_name: cach-api-${ENVIRONMENT:-Sandbox}
    restart: unless-stopped
    env_file:
      - .env
    ports:
      - "${API_PORT:-3001}:3001"
    networks:
      - cach-network
    depends_on:
      postgres:
        condition: service_healthy
      minio:
        condition: service_healthy
      loki:
        condition: service_started
    volumes:
      - uploads_data_${ENVIRONMENT:-Sandbox}:/app/uploads
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: local
      # options:
      #   loki-url: "http://localhost:${LOKI_PORT:-3100}/loki/api/v1/push"
      #   loki-batch-size: "400"

volumes:
  postgres_data_Production:
  postgres_data_Staging:
  postgres_data_Sandbox:
  minio_data_Production:
  minio_data_Staging:
  minio_data_Sandbox:
  uploads_data_Production:
  uploads_data_Staging:
  uploads_data_Sandbox:
  loki_data_Production:
  loki_data_Staging:
  loki_data_Sandbox:
  grafana_data_Production:
  grafana_data_Staging:
  grafana_data_Sandbox:

networks:
  cach-network:
    driver: bridge
